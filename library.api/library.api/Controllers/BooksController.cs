using System.Net.Mime;
using library.application;
using library.core;
using library.core.Dtos;
using Microsoft.AspNetCore.Mvc;

namespace library.api.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class BooksController: ControllerBase
    {
        private readonly IBookService _bookService;

        public BooksController(IBookService bookService)
        {
            _bookService = bookService;
        }

        /// <summary>
        /// Searches the entire Book table and returns records that match search parameter values
        /// if any.
        /// </summary>
        /// <param name="bookName">full or partial name of a book</param>
        /// <param name="ISBN">full or partial ISBN number of a book</param>
        /// <returns>A list of JSON objects where each object conatins the Id,Title,ISBN of the book </returns>
        [HttpGet]
        [Produces(MediaTypeNames.Application.Json)]
        [ProducesResponseType(typeof(List<BookDto>),200)]
        public async Task<ActionResult<List<BookDto>>> SearchAllBooks(string? bookName, string? ISBN)
        {
            List<BookDto> bookList = await _bookService.BooksSearch(bookName, ISBN);
            foreach (var book in bookList)
            {
                book._links = new EntityLink { Self = Url.Action(action: nameof(GetBookbyId), controller: nameof(BooksController).Replace("Controller",""), values: new { Id = book.Id }, protocol: Request.Scheme) };
            }
            return Ok(bookList);
        }

        /// <summary>
        /// Get a specific book by Id. the book's Id is generated by DB.
        /// User needs to find this url in the _links property in the response of /api/Books
        /// endpoint.
        /// </summary>
        /// <param name="id">Id of the book generated by DB</param>
        /// <returns>A Json object of Book type</returns>
        [HttpGet("{id:long}")]
        [Produces(MediaTypeNames.Application.Json)]
        [ProducesResponseType(typeof(Book),200)]
        [ProducesResponseType(204)]
        public async Task<ActionResult<Book>> GetBookbyId(long id)
        {
            Book? found_book = await _bookService.GetBookByID(id);
            if (found_book == null) return NoContent();
            else return Ok(found_book);
        }
    }
}
